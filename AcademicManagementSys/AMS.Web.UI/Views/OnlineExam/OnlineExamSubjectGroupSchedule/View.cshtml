@model AMS.ViewModel.OnlineExamSubjectGroupScheduleViewModel
<div id="custom-content">
    <div class="block-header">
        <h4>&nbsp;<i class="zmdi zmdi-view-toc"></i>&nbsp; &nbsp;View Schedule for @Model.SubjectGroupDescription</h4>
    </div>
    <div class="card">
        @Html.HiddenFor(model => model.OnlineExamExaminationCourseApplicableID)
        @Html.HiddenFor(model => model.OnlineExamQuestionBankMasterID)
        @Html.HiddenFor(model => model.SubjectID)
        @Html.HiddenFor(model => model.SubjectGroupID)
        @Html.HiddenFor(model => model.OnlineExamSubjectGroupScheduleID)
        @Html.HiddenFor(model => model.SubjectGroupDescription)
        @Html.HiddenFor(model => model.SectionScheduleList)
        @Html.HiddenFor(model => model.CourseYearID)
        @Html.HiddenFor(model => model.CentreCode)

        <div class="card-body card-padding">
            <div id="displayErrorMessage" role="alert" hidden class="alert">
                <button class="close" type="button"><span aria-hidden="true">×</span></button>
                <p id="messageContent"></p>
            </div>
            <form id="FormEditOnlineExamSubjectGroupSchedule" role="form" class="row">
                  <div class="form-group col-sm-4"></div>
                 <div class="form-group col-sm-4"></div>
                  <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        <div class="checkbox m-b-15">
                            <label>
                                 @if (Model.IsTimeFlexible == true)
                                {
                                    <input type="checkbox" id="IsTimeFlexible" checked />
                                }
                                else{
                               <input type="checkbox" id="IsTimeFlexible"   />
                                }
                                <i class="input-helper"></i>
                                @Html.LabelFor(model => model.IsTimeFlexible)
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.ExaminationStartDate, new { })
                        @Html.TextBoxFor(model => model.ExaminationStartDate, new { @class = "form-control input-sm" })

                    </div>
                    @Html.ValidationMessageFor(model => model.ExaminationStartDate)
                </div>
              <div class="form-group col-sm-4">
                        <div class="form-group fg-line">
                            @Html.LabelFor(model => model.ExaminationEndDate, new { })
                            @Html.TextBoxFor(model => model.ExaminationEndDate, new { @class = "form-control input-sm " })
                        </div>
                        @Html.ValidationMessageFor(model => model.ExaminationEndDate)
                </div>
             @if (Model.IsTimeFlexible == true){
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.ExaminationStartTime, new { })
                        @Html.TextBoxFor(model => model.ExaminationStartTime, new { @class = "form-control input-sm ",disabled = "disabled"})
                    </div>
                    @Html.ValidationMessageFor(model => model.ExaminationStartTime)
                </div>
                  <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.ExaminationEndTime, new { })
                        @Html.TextBoxFor(model => model.ExaminationEndTime, new { @class = "form-control input-sm", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.ExaminationEndTime)
                </div>
                  }
            else{
                  <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.ExaminationStartTime, new { })
                        @Html.TextBoxFor(model => model.ExaminationStartTime, new { @class = "form-control input-sm " })
                    </div>
                    @Html.ValidationMessageFor(model => model.ExaminationStartTime)
                </div>
                 <div class="form-group col-sm-4">
                    <div class="form-group fg-line  " >
                        @Html.LabelFor(model => model.ExaminationEndTime, new { })
                        @Html.TextBoxFor(model => model.ExaminationEndTime, new { @class = "form-control input-sm ExaminationEndTime" })
                    </div>
                    @Html.ValidationMessageFor(model => model.ExaminationEndTime)
                </div>
            }
               
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.TotalQuestions, new { })
                        @Html.TextBoxFor(model => model.TotalQuestions, new { @class = "form-control input-sm " })
                    </div>
                    @Html.ValidationMessageFor(model => model.TotalQuestions)
                </div>
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.TotalMarks, new { })
                        @Html.TextBoxFor(model => model.TotalMarks, new { @class = "form-control input-sm " })
                    </div>
                    @Html.ValidationMessageFor(model => model.TotalMarks)
                </div>

                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.PassingMarks, new { })
                        @Html.TextBoxFor(model => model.PassingMarks, new { @class = "form-control input-sm " })
                    </div>
                    @Html.ValidationMessageFor(model => model.PassingMarks)
                </div>
                <div class="form-group col-sm-4" style="display:none;">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.MarksForEachQues, new { })
                        @Html.TextBoxFor(model => model.MarksForEachQues, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.MarksForEachQues)
                </div>
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.IsNegavieMarking, new { })
                        @Html.DropDownList("IsNegavieMarking", ViewData["IsNegavieMarking"] as List<SelectListItem>, new { @class = "form-control input-sm", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.IsNegavieMarking)
                </div>
                @if (Model.IsNegavieMarking == true)
                {
                    <div class="form-group col-sm-4">
                        <div class="form-group fg-line">
                            @Html.LabelFor(model => model.MarksToBeDeducted, new { })
                            @Html.TextBoxFor(model => model.MarksToBeDeducted, new { @class = "form-control input-sm ", disabled = "disabled" })
                        </div>
                        @Html.ValidationMessageFor(model => model.MarksToBeDeducted)
                    </div>
                }
                else
                {
                    <div class="form-group col-sm-4" style="display: none;">
                        <div class="form-group fg-line">
                            @Html.LabelFor(model => model.MarksToBeDeducted, new { })
                            @Html.TextBoxFor(model => model.MarksToBeDeducted, new { @class = "form-control input-sm " })
                        </div>
                        @Html.ValidationMessageFor(model => model.MarksToBeDeducted)
                    </div>
                }
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.Level1Marks, new { })
                        @Html.TextBoxFor(model => model.Level1Marks, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Level1Marks)
                </div>
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.Level2Marks, new { })
                        @Html.TextBoxFor(model => model.Level2Marks, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Level2Marks)
                </div>
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.Level3Marks, new { })
                        @Html.TextBoxFor(model => model.Level3Marks, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Level3Marks)
                </div>

                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.Level1TimeInMinutes, new { })
                        @Html.TextBoxFor(model => model.Level1TimeInMinutes, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Level1TimeInMinutes)
                </div>
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.Level2TimeInMinutes, new { })
                        @Html.TextBoxFor(model => model.Level2TimeInMinutes, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Level2TimeInMinutes)
                </div>
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.Level3TimeInMinutes, new { })
                        @Html.TextBoxFor(model => model.Level3TimeInMinutes, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Level3TimeInMinutes)
                </div>

                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.Level4TimeInMinutes, new { })
                        @Html.TextBoxFor(model => model.Level4TimeInMinutes, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.Level4TimeInMinutes)
                </div>

                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.FixedFlexibleTime, new { })
                        @Html.TextBoxFor(model => model.FixedFlexibleTime, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.FixedFlexibleTime)
                </div>
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.ExamDuration, new { })
                        @Html.TextBoxFor(model => model.ExamDuration, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.ExamDuration)
                </div>

                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.DayOpenTime, new { })
                        @Html.TextBoxFor(model => model.DayOpenTime, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.DayOpenTime)
                </div>
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.DayCloseTime, new { })
                        @Html.TextBoxFor(model => model.DayCloseTime, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.DayCloseTime)
                </div>
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.ExaminationStatus, new { })
                        @Html.TextBoxFor(model => model.ExaminationStatus, new { @class = "form-control input-sm ", disabled = "disabled" })
                    </div>
                    @Html.ValidationMessageFor(model => model.ExaminationStatus)
                </div>
                <div class="form-group col-sm-4">
                    <div class="form-group fg-line">
                        <div class="checkbox m-b-15">
                            <label>
                                @if (Model.IsScheduleForAllSections == true)
                                {
                                    <input type="checkbox" id="IsScheduleForAllSections" checked disabled="disabled" />
                                }
                                else
                                {
                                    <input type="checkbox" id="IsScheduleForAllSections" disabled="disabled" />
                                }
                                <i class="input-helper"></i>
                                @Html.LabelFor(model => model.IsScheduleForAllSections)
                            </label>
                        </div>
                    </div>
                </div>

                @if (Model.IsScheduleForAllSections == false)
                {
                    <div class="row" id="SectionDetails">
                        <div class="col-sm-12">
                            <div id="DivAddRowTable" style="overflow: auto;">
                                <table id="tblData" class="table user-tbl " style="border: 1px solid #dddddd">
                                    <thead>
                                        <tr>
                                            <th>Section Detail</th>
                                            <th>Examination Start Date</th>
                                            <th>Examination End Date</th>
                                            <th>Examination Satrt Time</th>
                                            <th>Examination End Time</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (Model.SectionScheduleList != null)
                                        {
                                            String[] SectionScheduleArray = Model.SectionScheduleList.Split(new char[] { '~' });
                                            for (var i = 0; i < SectionScheduleArray.Length; i=i+5)
                                            {
                                                <tr>
                                                    <td style="text-align:center;">@SectionScheduleArray[i]</td>
                                                    <td style="text-align:center";>@SectionScheduleArray[i+1]</td>
                                                    <td style="text-align:center;">@SectionScheduleArray[i+2]</td>
                                                    <td style="text-align:center;">@SectionScheduleArray[i+3]</td>
                                                    <td style="text-align:center;">@SectionScheduleArray[i+4]</td>
                                                </tr>
                                               
                                            }

                                        }

                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>  
                }
                
                <div class="form-group col-sm-12">
                    <input class="btn btn-primary" style="margin-left:1%" value="@Resources.ButtonAction_Submit" id="UpdateOnlineExamSubjectGroupScheduleRecord" type="button" />
                </div>
            </form>
        </div>
    </div>
</div>


<script src="@Url.Content("~/Scripts/jquery.validate-1.15.0.js") " type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/materialtheme/vendors/bower_components/moment/min/moment.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/materialtheme/vendors/bower_components/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js")" type="text/javascript"></script>


<script type="text/javascript">
    $(document).ready(function () {
        var ExaminationStartDate = $('#ExaminationStartDate').val()
        var selectedExaminationStartDate = new Date(ExaminationStartDate);
        var minDate = selectedExaminationStartDate;
        if (ExaminationStartDate == "" || selectedExaminationStartDate > moment()) {
            minDate = moment();
        }
        $("#ExaminationStartDate").datetimepicker({
            format: 'DD MMMM YYYY',
            minDate: minDate,
        });
        var StartDate = $("#ExaminationStartDate").val();
        $("#ExaminationEndDate").datetimepicker({
            format: 'DD MMMM YYYY',
            minDate: minDate,
        });
        $('#ExaminationStartDate').on('dp.hide', function (e) {
            var minDate = new Date(e.date.valueOf());
            minDate.setDate(minDate.getDate());
            $("#ExaminationEndDate").val($('#ExaminationStartDate').val());
            $("#ExaminationEndDate").data("DateTimePicker").minDate(minDate);

        });
        $('#ExaminationEndDate').on('dp.hide', function (e) {
            var maxDate = new Date(e.date.valueOf());
            maxDate.setDate(maxDate.getDate());
            $("#ExaminationStartDate").data("DateTimePicker").maxDate(maxDate);
         
        });
        $("#ExaminationStartTime").datetimepicker({
            format: 'LT'
        });

        $("#ExaminationEndTime").datetimepicker({
            format: 'LT'
        });
        OnlineExamSubjectGroupSchedule.Initialize();
    });
</script>
