@*@model AMS.ViewModel.EmpEmployeeMasterViewModel
@{
    Layout = null;
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js") " type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/AMS_Scripts/Employee/EmployeeInformation.js")" type="text/javascript"></script>

<div class="widget-block" style="width: 300px;">
    <div class="widget-head">
        <h5 id="hFive">Change Password</h5>
    </div>
    <div class="widget-box" id="ChangePassword">
        <div id="SuccessMessagediv" style="display:none;color:#000;" class="alert"></div>
        <form id="FormChangePassword" method="post">
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            @Html.HiddenFor(m => m.Password)
            <br />
            <div class="control-group control-label">
                @Html.LabelFor(model => model.CurrentPassword, new { style = "font-Weight:Bold;margin-left: 15px" })
                <div class="controls input-xlarge text-tip">
                    @Html.TextBoxFor(model => model.CurrentPassword, new { @class = "input-xlarge text-tip", value= "", style = "margin-left: 15px;",type = "password",  maxlength = "100", minlength = "6" })
                    
                    <br />
                    @Html.ValidationMessageFor(model => model.CurrentPassword)
                </div>
            </div>
            <div class="control-group control-label">

                @Html.LabelFor(model => model.NewPassword, new { style = "font-Weight:Bold;margin-left: 15px" })

                <div class="controls input-xlarge text-tip">
                    @Html.TextBoxFor(model => model.NewPassword, new { @class = "input-xlarge text-tip", style = "font-weight:bold;margin-left: 15px", type = "password", maxlength = "100", minlength = "6" })
                    <br />
                    @Html.ValidationMessageFor(model => model.NewPassword)
                </div>
            </div>
            <div class="control-group control-label">

                @Html.LabelFor(model => model.ConfirmPassword, new { style = "font-Weight:Bold;margin-left: 15px" })

                <div class="controls input-xlarge text-tip">
                    <input name="ConfirmPassword" class="input-xlarge text-tip" id="ConfirmPassword" onkeyup="checkPass(); return false;" style="font-weight:bold;margin-left: 15px;" type="password">
                    <span id="confirmMessage" class="confirmMessage1"></span>
                    <br />
                    @Html.ValidationMessageFor(model => model.ConfirmPassword)
                </div>
            </div>

            <div class="form-actions" style="border: 1px solid #e5e5e5;text-align:right">
                <input type="button" id="CreateChangePasswordRecord" value="@Resources.ButtonAction_Submit" class="btn btn-primary" />
                

            </div>
        </form>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
    EmployeeInformation.Initialize();

    });

    $('#CurrentPassword').on("keydown", function (e) {
        AMSValidation.NotAllowSpaces(e);
    })
    $('#NewPassword').on("keydown", function (e) {
        AMSValidation.NotAllowSpaces(e);
    })
    $('#ConfirmPassword').on("keydown", function (e) {
        AMSValidation.NotAllowSpaces(e);
    })
    $('#NewPassword').on("keydown", function (e) {
        $('#ConfirmPassword').val("");
        var pass2 = document.getElementById('ConfirmPassword');
        var message = document.getElementById('confirmMessage1');
        var resultMessage = document.getElementById('result');
        var goodColor = "#ffffff";
        debugger;
        pass2.style.backgroundColor = goodColor;
        message.style.color = goodColor;
        message.innerHTML = "";
        resultMessage.innerHTML = "";
    });
   
    
  
    //function checkPass() {
    //    debugger;
    //    //Store the password field objects into variables ...
    //    debugger;
    //    debugger;
    //    var pass1 = $('#CurrentPassword').val();
    //    var pass2 = $('#Password').val();
      
    //    //Store the Confimation Message Object ...
    //    var message = document.getElementById('confirmMessage');
    //    //Set the colors we will be using ...
    //    var goodColor = "#66cc66";
    //    var badColor = "#ff6666";
    //    //Compare the values in the password field
    //    //and the confirmation field
    //    if (($('#CurrentPassword').val()) == ($('#Password').val())) {
    //        //The passwords match.
    //        //Set the color to the good color and inform
    //        //the user that they have entered the correct password
    //        //CurrentPassword.style.backgroundColor = goodColor;
    //        //message.style.color = goodColor;
    //        message.innerHTML = "Passwords Match!"
    //    } else {
    //        //The passwords do not match.
    //        //Set the color to the bad color and
    //        //notify the user.
    //        //CurrentPassword.style.backgroundColor = badColor;
    //        //message.style.color = badColor;
    //        message.innerHTML = "Passwords Do Not Match!"
    //    }
    //}

    function checkPass() {
        debugger;
    
        //Store the Confimation Message Object ...
        var message = document.getElementById('confirmMessage1');
        //Set the colors we will be using ...
        var goodColor = "#66cc66";
        var badColor = "#ff6666";
        //Compare the values in the password field
        //and the confirmation field
        if (($('#NewPassword').val()) == ($('#ConfirmPassword').val())) {
            //The passwords match.
            //Set the color to the good color and inform
            //the user that they have entered the correct password
            ConfirmPassword.style.backgroundColor = goodColor;
            message.style.color = goodColor;
            message.innerHTML = "Passwords Match!"
        } else {
            //The passwords do not match.
            //Set the color to the bad color and
            //notify the user.
            ConfirmPassword.style.backgroundColor = badColor;
            message.style.color = badColor;
            message.innerHTML = "Passwords Do Not Match!"
        }
    }

</script>

<style>
    .spanFullName {
        width: 25%;
    }

    .spanlabel {
        width: 15%;
    }

    .hrStyle {
        margin-top: 0%;
    }

    .txtbox {
        font-weight: bold;
        width: 124%;
    }
</style>*@

@*------------------------new code--------------------------*@

@model AMS.ViewModel.EmpEmployeeMasterViewModel
@{

    Layout = null;
}


<script src="@Url.Content("~/Scripts/jquery.validate.min.js") " type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/AMS_Scripts/Employee/EmployeeInformation.js")" type="text/javascript"></script>

<div id="custom-content">
    <div class="block-header">
        <h2>&nbsp;<i class="zmdi zmdi-view-toc"></i>&nbsp;Change Password</h2>
    </div>
    <div class="card">
        <div class="card-body card-padding" style="padding-bottom:300px;">
            <div id="displayErrorMessage" role="alert" hidden class="alert">
                <button class="close" type="button"><span aria-hidden="true">×</span></button>
                <p id="messageContent"></p>
            </div>
            @*<div id="update-message" class="alert" style="display: none; color: #000"></div>*@
            <div id="SuccessMessagediv" style="display:none;color:#fff;" class="alert"></div>

            <form id="FormChangePassword" method="post">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                @Html.HiddenFor(m => m.Password)
                <div class="col-sm-12">
                    <div class="col-sm-12">
                        <span style="color:red">*</span>@Html.LabelFor(model => model.CurrentPassword, new { style = "" })
                        <div class="form-group fg-line">
                            @Html.TextBoxFor(model => model.CurrentPassword, new { @class = "form-control", value = "", style = "", type = "password", maxlength = "100", minlength = "6" })
                        </div>
                        @Html.ValidationMessageFor(model => model.CurrentPassword)
                    </div>

                    <div class="col-sm-12">
                        <span style="color:red">*</span>@Html.LabelFor(model => model.NewPassword, new { style = "" })
                        <div class="form-group fg-line">
                            @Html.TextBoxFor(model => model.NewPassword, new { @class = "form-control", style = "", type = "password", maxlength = "100", minlength = "6" })
                        </div>
                        @Html.ValidationMessageFor(model => model.NewPassword)
                    </div>
                    
                    <div class="col-sm-12">
                        <span style="color:red">*</span>@Html.LabelFor(model => model.ConfirmPassword, new { style = "" })
                        <div class="form-group fg-line">
                            <input name="ConfirmPassword" class="form-control" id="ConfirmPassword" onkeyup="checkPass(); return false;" style="" type="password">
                        </div>
                        @Html.ValidationMessageFor(model => model.ConfirmPassword)
                    </div>
                </div>

                <div class="col-sm-12">
                    <div class="form-group">
                        <button type="button" id="CreateChangePasswordRecord" class="btn btn-primary">@Resources.ButtonAction_Submit</button>
                    </div>
                </div>
            </form>

        </div>
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        EmployeeInformation.Initialize();

    });

    $('#CurrentPassword').on("keydown", function (e) {
        AMSValidation.NotAllowSpaces(e);
    })
    $('#NewPassword').on("keydown", function (e) {
        AMSValidation.NotAllowSpaces(e);
    })
    $('#ConfirmPassword').on("keydown", function (e) {
        AMSValidation.NotAllowSpaces(e);
    })
    $('#NewPassword').on("keydown", function (e) {
        $('#ConfirmPassword').val("");
        var pass2 = document.getElementById('ConfirmPassword');
        var message = document.getElementById('confirmMessage1');
        var resultMessage = document.getElementById('result');
        var goodColor = "#ffffff";
        //debugger;
        pass2.style.backgroundColor = goodColor;
        message.style.color = goodColor;
        message.innerHTML = "";
        resultMessage.innerHTML = "";
    });



    

    function checkPass() {
        //debugger;

        //Store the Confimation Message Object ...
        var message = document.getElementById('confirmMessage1');
        //Set the colors we will be using ...
        var goodColor = "#66cc66";
        var badColor = "#ff6666";
        //Compare the values in the password field
        //and the confirmation field
        if (($('#NewPassword').val()) == ($('#ConfirmPassword').val())) {
            //The passwords match.
            //Set the color to the good color and inform
            //the user that they have entered the correct password
            ConfirmPassword.style.backgroundColor = goodColor;
            message.style.color = goodColor;
            message.innerHTML = "Passwords Match!"
        } else {
            //The passwords do not match.
            //Set the color to the bad color and
            //notify the user.
            ConfirmPassword.style.backgroundColor = badColor;
            message.style.color = badColor;
            message.innerHTML = "Passwords Do Not Match!"
        }
    }

</script>


















