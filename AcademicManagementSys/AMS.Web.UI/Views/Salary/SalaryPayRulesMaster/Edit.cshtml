@model AMS.ViewModel.SalaryPayRulesViewModel

<div id="custom-content">
    <div class="block-header">
        <h2>&nbsp;<i class="zmdi zmdi-view-toc"></i>&nbsp;Edit Salary Pay Rule</h2>
    </div>
    <div class="card">
        <div id="card-body card-padding">
            <div id="displayErrorMessage" role="alert" hidden class="alert">
                <button class="close" type="button"><span aria-hidden="true">×</span></button>
                <p id="messageContent"></p>
            </div>
            <form id="FormEditSalaryPayRulesMaster">
                @Html.HiddenFor(m => m.ID)
                <div class="col-sm-6">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.PayScaleRuleDescription, new { })
                        @Html.TextBoxFor(model => model.PayScaleRuleDescription, new { @class = "form-control input-sm" })
                    </div>
                    @Html.ValidationMessageFor(model => model.PayScaleRuleDescription)
                </div>
                <div class="col-sm-6">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.PayScaleFromDate, new { })
                        @Html.TextBoxFor(model => model.PayScaleFromDate, new { @class = "form-control input-sm date-picker" })
                    </div>
                    @Html.ValidationMessageFor(model => model.PayScaleFromDate)
                </div>
                <div class="col-sm-6">
                    <div class="form-group fg-line">
                        @Html.LabelFor(model => model.PayScaleUptoDate, new { })
                        @Html.TextBoxFor(model => model.PayScaleUptoDate, new { @class = "form-control input-sm date-picker" })
                    </div>
                    @Html.ValidationMessageFor(model => model.PayScaleUptoDate)
                </div>
                <div class="col-sm-6 checkbox">
                    @*<div class="form-group fg-line">
                    @Html.LabelFor(model => model.IsActive, new { })
                    @Html.CheckBoxFor(model => model.IsActive, new { @class = "form-control input-sm" })
                </div>
                @Html.ValidationMessageFor(model => model.IsActive)*@
                    <label style="margin-top: 2%; margin-bottom: 3%;">
                        @if (Model.IsActive == true)
                        {
                            <input type="checkbox" id="IsActive" checked>
                        }
                        else
                        {
                            <input type="checkbox" id="IsActive">
                        }

                        <i class="input-helper"></i>
                        @Html.LabelFor(model => model.IsActive, new { style = "padding-left: 0px; margin-top:2%;" })
                    </label>
                </div>
                <div class="col-sm-12 m-t-30">
                    <input class=" btn btn-primary btn-sm m-t-12 waves-effect" value="@Resources.ButtonAction_Submit" id="EditSalaryPayRulesMasterRecord" type="button" />
                </div>
            </form>
        </div>
    </div>
</div>
<script src="@Url.Content("~/Scripts/jquery.validate-1.15.0.js") " type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/materialtheme/vendors/bower_components/moment/min/moment.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Content/materialtheme/vendors/bower_components/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js")" type="text/javascript"></script>


<script type="text/javascript">
    $(document).ready(function () {
        var selectedPayScaleFrom = $("#PayScaleFromDate").val();
        var selectedPayScaleFromInDateFormat = new Date(selectedPayScaleFrom);
        var PayScaleFromMinDate = selectedPayScaleFromInDateFormat;
        if (selectedPayScaleFrom == "" || selectedPayScaleFromInDateFormat > moment()) {
            PayScaleFromMinDate = moment();
        }

        $('#PayScaleFromDate').datetimepicker({
            format: 'DD MMMM YYYY',
            minDate: PayScaleFromMinDate
        }).on('dp.change', function (e) {
            var selectedNewPayScaleFromDate = $(this).val();
            var selectedNewPayScaleFromDateInDateFormat = new Date(selectedNewPayScaleFromDate);
            $("#PayScaleUptoDate").data("DateTimePicker").minDate(selectedNewPayScaleFromDateInDateFormat);

            var PayScaleUptoSelAl = $("#PayScaleUptoDate").val();
            var PayScaleUptoInDateFormatSelAl = new Date(PayScaleUptoSelAl);
            if (PayScaleUptoSelAl != "" && selectedNewPayScaleFromDateInDateFormat > PayScaleUptoInDateFormatSelAl) {
                $("#PayScaleUptoDate").val('');
            }
        });

        var selectedPayScaleUpto = $("#PayScaleUptoDate").val();
        var selectedPayScaleUptoInDateFormat = new Date(selectedPayScaleUpto);
        var PayScaleUptoMinDate = selectedPayScaleUptoInDateFormat;
        if (selectedPayScaleUpto == "" || selectedPayScaleUptoInDateFormat > moment()) {
            PayScaleUptoMinDate = moment();
        }
        $('#PayScaleUptoDate').datetimepicker({
            format: 'DD MMMM YYYY',
            minDate: PayScaleUptoMinDate
        });
        SalaryPayRulesMaster.Initialize();
    });
</script>
